    # -*- encoding: utf-8 -*-
import glob, os, re
import shutil
outputFolderName = "autogenerated_uml"
if os.path.exists(outputFolderName):
    shutil.rmtree(outputFolderName)
os.makedirs(outputFolderName)

header = '''<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:java="http://www.yworks.com/xml/yfiles-common/1.0/java" xmlns:sys="http://www.yworks.com/xml/yfiles-common/markup/primitives/2.0" xmlns:x="http://www.yworks.com/xml/yfiles-common/markup/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:y="http://www.yworks.com/xml/graphml" xmlns:yed="http://www.yworks.com/xml/yed/3" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://www.yworks.com/xml/schema/graphml/1.1/ygraphml.xsd">
  <!--Created by yEd 3.14.1-->
  <key attr.name="Description" attr.type="string" for="graph" id="d0"/>
  <key for="port" id="d1" yfiles.type="portgraphics"/>
  <key for="port" id="d2" yfiles.type="portgeometry"/>
  <key for="port" id="d3" yfiles.type="portuserdata"/>
  <key attr.name="url" attr.type="string" for="node" id="d4"/>
  <key attr.name="description" attr.type="string" for="node" id="d5"/>
  <key for="node" id="d6" yfiles.type="nodegraphics"/>
  <key for="graphml" id="d7" yfiles.type="resources"/>
  <key attr.name="url" attr.type="string" for="edge" id="d8"/>
  <key attr.name="description" attr.type="string" for="edge" id="d9"/>
  <key for="edge" id="d10" yfiles.type="edgegraphics"/>
  <graph edgedefault="directed" id="G">
'''

footer = '''
</graph>
  <data key="d7">
    <y:Resources/>
  </data>
</graphml>
'''

def getNode():
	return '''<node id="nAQUIID">
      <data key="d4"/>
      <data key="d6">
        <y:UMLClassNode>
          <y:Geometry height="202.0" width="161.0" x="AQUIX" y="252.0"/>
          <y:Fill color="#FFCC00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="13" fontStyle="bold" hasBackgroundColor="false" hasLineColor="false" height="19.92626953125" modelName="custom" textColor="#000000" visible="true" width="37.947265625" x="61.5263671875" y="3.0">AQUICLASE<y:LabelModel>
              <y:SmartNodeLabelModel distance="4.0"/>
            </y:LabelModel>
            <y:ModelParameter>
              <y:SmartNodeLabelModelParameter labelRatioX="0.0" labelRatioY="0.0" nodeRatioX="0.0" nodeRatioY="-0.03703090122767855" offsetX="0.0" offsetY="0.0" upX="0.0" upY="-1.0"/>
            </y:ModelParameter>
          </y:NodeLabel>
          <y:UML clipContent="true" constraint="" omitDetails="false" stereotype="" use3DEffect="true">
            <y:AttributeLabel>AQUIATRIBUTOS</y:AttributeLabel>
            <y:MethodLabel>AQUIMETODOS</y:MethodLabel>
          </y:UML>
        </y:UMLClassNode>
      </data>
    </node>'''

#Get all class names ->     m = re.findall('class (.*)\(.*\):', file_str)

def extract(file_str, output):

	class_names = re.findall('class (.*):', file_str)
	class_bodies = re.split('class .*\(.*\):.*', file_str)
	x = 0
	for i in range (1, len(class_bodies)):
		methods = getMatches('def (.*):', class_bodies[i])	
		attributes = getMatches('self\.([^.\s\n()\.\,\;\[\]+-\:]+)[=\s\.\[\,\;\:]', class_bodies[i])
		newNode = getNode()
		methodPair = ('AQUIMETODOS', toPlainString(methods))
		attributePair = ('AQUIATRIBUTOS', toPlainString(attributes))
		classPair = ('AQUICLASE', str(class_names[i-1]))
		xCoordPair = ('AQUIX', str(x))
		idPair = ('AQUIID', str(i-1))
		x+=200
		writeNode(output,newNode, [methodPair, attributePair, classPair, idPair, xCoordPair])

def toPlainString(list):
	output = ''
	for element in list:
		output+=element+"\n"
	return output

def writeNode(output,nodeSheet, substitutions):
	for (fooValue, newString) in substitutions:
		nodeSheet = nodeSheet.replace(fooValue, newString)
	output.write(nodeSheet)
	
def getMatches(regex, string_were_we_look_for):
	container = re.findall(regex, string_were_we_look_for)
	container = sorted(set(container))
	return container

def createNewUML(inputFileName, outputFileName):
	inputFile = open(inputFileName, 'r')
	outputFile = open(outputFileName, 'w')
	outputFile.write(header)
	extract(inputFile.read(), outputFile)
	outputFile.write(footer)
	inputFile.close()
	outputFile.close()

def umlName(fileName):
	return fileName.replace('.py','.graphml')

ignoredFiles = ['__init__.py', 'umlextractor.py', 'umlYedExtractor.py', 'main.py', 'print_detector.py']
ext='.py'

for root, dirs, files in os.walk('.'):
	for currentFile in files:
		if currentFile.lower().endswith(ext) and currentFile.lower() not in ignoredFiles:
			createNewUML(os.path.join(root, currentFile),outputFolderName+"/"+umlName(currentFile))
print "Generado directorio " + outputFolderName + " con los diagramas en yEd"

